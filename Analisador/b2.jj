options {
  IGNORE_CASE = true;
  DEBUG_PARSER = true;
}

PARSER_BEGIN(BCAnalisadorSintatico)

import java.io.*;

public class BCAnalisadorSintatico {

  public  static void main(String args[])
  {

    String nome_arquivo = args[0];
    BCAnalisadorSintatico analisador;

    try {
        analisador = new BCAnalisadorSintatico(new java.io.FileInputStream(nome_arquivo));
    }
    catch (java.io.FileNotFoundException e) {
        System.out.println("Arquivo " + nome_arquivo + " nao foi encontrado.");
        return;
    }

    try {
      analisador.start();
      System.out.println("Programa analisado com sucesso.");
    } catch(ParseException e) {
      System.out.println(e.getMessage());
    }

  }
}

PARSER_END(BCAnalisadorSintatico)

SKIP : {
  " "
  |  "\t"
  |  "\n"
  |  "\r"
  |  <"//" (~["\n","\r"])* ("\n" | "\r" | "\r\n")>
}
/* COMENTARIO DE MULTIPLAS LINHAS */
SKIP :
{
  "/*" : multilinecomment
}

<multilinecomment> SKIP:
{
   "*/" : DEFAULT
|  <~[]>
}

/* SÍMBOLOS */
TOKEN:
{
    <LINE_BREAK: "\\n" | "\\r" | "\\r\\n" > |
    <PLUS: ["+"]> |
    <MINUS: ["-"]> |
    <DIV: ["/"]> |
    <MUL: ["*"]> |
    <MOD: ["%"]> |
    <POWER: ["^"]> |
    <PLUSPLUS: "+" "+"> |
    <MINUSMINUS: "-" "-"> |
    <OR: "|" "|"> |
    <AND: "&" "&"> |
    <NOT: ["!"]> |
    <MINUS_ASSIGN: "-" "="> |
    <PLUS_ASSIGN: "+" "="> |
    <DIV_ASSIGN: "/" "="> |
    <MUL_ASSIGN: "*" "="> |
    <MOD_ASSIGN: "%" "="> |
    <POWER_ASSIGN: "^" "="> |
    <BIGGER_THAN: [">"]> |
    <SMALLER_THAN: ["<"]> |
    <BIGGER_EQUAL_THAN: ">" "="> |
    <SMALLER_EQUAL_THAN: "<" "="> |
    <EQUAL: "=" "="> |
    <NOT_EQUAL: "!" "=">
}


/* SEPARADORES E AGRUPADORES */
TOKEN:
{
  <OPEN_PAR: ["("]>
| <CLOSE_PAR: [")"]>
|	<OPEN_BRACE: ["{"]>
|	<CLOSE_BRACE: ["}"]>
|	<COMMA: [","]>
| <SEMICOLON: [";"]>
|	<QUOT: ["\""]>
|	<OPEN_BRACK: ["["]>
|	<CLOSE_BRACK: ["]"]>
|	<DOT: ["."]>
|	<ASSIGN_SYMBOL: ["="]>
| <SEPARADOR: [";"]|"\\n">
}

/* PALAVRAS RESERVADAS E FUNÇÕES NATIVAS */
TOKEN:
{
  <IBASE: "i" "b" "a" "s" "e">
  | <SCALE: "s" "c" "a" "l" "e">
	|	<LAST: "l" "a" "s" "t" | <DOT>>
	|	<OBASE: "o" "b" "a" "s" "e">
	|	<SQRT: "s" "q" "r" "t">
	|	<LENGTH: "l" "e" "n" "g" "t" "h">
	|	<FUNC_S: "s">
	|	<FUNC_C: "c">
	|	<FUNC_E: "e">
	|	<FUNC_L: "l">
	|	<FUNC_A: "a">
	|	<FUNC_J: "j">
	|	<IF: "i" "f">
	|	<ELSE: "e" "l" "s" "e">
	|	<WHILE: "w" "h" "i" "l" "e">
	|	<FOR: "f" "o" "r">
	|	<PRINT: "p" "r" "i" "n" "t">
	|	<DEFINE: "d" "e" "f" "i" "n" "e">
	|	<AUTO: "a" "u" "t" "o">
	|	<BREAK: "b" "r" "e" "a" "k">
	|	<CONTINUE: "c" "o" "n" "t" "i" "n" "u" "e">
	|	<QUIT: "q" "u" "i" "t">
	|	<RETURN: "r" "e" "t" "u" "r" "n">
}

/* NUMEROS, PALAVRAS E IDENTIFICADORES */
TOKEN:
{
  <#DIGIT: ["0"-"9"] > |
  <#LETTER: ["a"] | ["b"] | ["c"] | ["d"] | ["e"] | ["f"] | ["g"] | ["h"] | ["i"] | ["j"] | ["k"] | ["l"] | ["m"] | ["n"] | ["o"] | ["p"] | ["q"] | ["r"] | ["s"] | ["t"] | ["u"] | ["v"] | ["w"] | ["x"] | ["y"] | ["z"] | ["_"]> |
  <#SYMBOL: [" "] | <NOT> | ["%"] | ["&"] | ["'"] | ["("] | [")"] | ["*"] | ["+"] | [","] | ["-"] | ["."] | ["/"] | [":"] | [";"] | <SMALLER_THAN> | <ASSIGN_SYMBOL> | <BIGGER_THAN>  | ["["] | ["]"] | ["^"] | ["{"] | ["|"] | ["}"]> |
	<#INTEGER: (["-"] | ["+"])? (<DIGIT>)+> |
	<#REAL: (["-"] | ["+"])? (<DIGIT>)+ "." (<DIGIT>)+> |
	<NUM: <INTEGER> | <REAL> > |
	<#ALPHANUMERIC: <DIGIT> | <LETTER> > |
	< ID: <LETTER> (<ALPHANUMERIC> )* > |
	<STRING: <QUOT>(<DIGIT>|<LETTER>|<SYMBOL>|<INTEGER>|<REAL>|<ALPHANUMERIC>|<LINE_BREAK>)*<QUOT>>
}

void start():
{
  /*var locais*/
    int value;
}
{
   bc() <EOF>
}

/* <bc> ::= (<comando> | <definição de função>)+ */
void bc():
{ }
{
  ( comando() | def_funcao())+
}

void comando():
{ }
{
  E() |
  comando_composto() |
  IF_COMMAND() |
  WHILE_COMMAND() |
  FOR_COMMAND() |
  NULL_COMMAND() |
  BREAK_COMMAND() |
  CONTINUE_COMMAND() |
  QUIT_COMMAND() |
  PRINT_COMMAND() |
  STRING_COMMAND() |
  RETURN_COMMAND()
}

/* <comando_composto> ::= { <ListaComandos> } */
void comando_composto():
{}
{
  <OPEN_BRACE> ListaComandos() <CLOSE_BRACE>
}

/* <ListaComandos> ::= <comando> (<separador> <comando>)* */
void ListaComandos():
{}
{
  comando() (<SEPARADOR> comando())*
}

/* <IF> ::= if ( <E> ) <comando> [ else <comando> ] */
void IF_COMMAND():
{}
{
  <IF> <OPEN_PAR> E() <CLOSE_PAR> comando() (<ELSE> comando())?

}

/* <WHILE> ::= while ( <E> ) <comando> */
void WHILE_COMMAND():
{}
{
  <WHILE> <OPEN_PAR> E() <CLOSE_PAR> comando()
}

/* <FOR> ::= for ( [<E>] ; [<E>] ; [<E>] ) <comando> */
void FOR_COMMAND():
{}
{
  <FOR> <OPEN_PAR> (E())? <SEMICOLON> (E())? <SEMICOLON> (E())? <CLOSE_PAR> comando()
}

/* <NULL> ::= ; */
void NULL_COMMAND():
{}
{
  <SEMICOLON>
}

/* <BREAK> ::= break*/
void BREAK_COMMAND():
{}
{
  <BREAK>
}

/* <CONTINUE> ::= continue */
void CONTINUE_COMMAND():
{}
{
  <CONTINUE>
}

/* <QUIT> ::= quit*/
void QUIT_COMMAND():
{}
{
  <QUIT>
}

/* <PRINT> ::= print <ListaExpressões> */
void PRINT_COMMAND():
{}
{
  <PRINT> ListaExpressoes()
}

/* <STRING_COMMAND> ::= <STRING>*/
void STRING_COMMAND():
{}
{
  <STRING>
}

/* <ListaExpressões> ::= <E> ( , <E>)* */
void ListaExpressoes():
{}
{
  E() (<COMMA> E())*
}

/*<RETORNO> ::= return ( [<E>] ) | return [<E>] */
void RETURN_COMMAND():
{ }
{
  <RETURN> (<OPEN_PAR> (E())? <CLOSE_PAR> | (E())?)
}

/* <E>::= <E1> ( || <E1> )* */
void E():
{Token t;}
{
  E1() ( <OR> E1())*
}

/* <E1>::= <E2> ( && <E2> )* */
void E1():
{}
{
  E2() ( <AND> E2())*
}

/* <E2>::= [ ! ] <E3> */
void E2():
{}
{
  (<NOT>)? E3()
}

/* <E3> ::= <E4> [ (== | <= | >= | != | < | > ) <E4> ] */
void E3():
{}
{
  E4() ((<EQUAL> | <SMALLER_EQUAL_THAN> | <BIGGER_EQUAL_THAN> | <NOT_EQUAL> | <SMALLER_THAN> | <BIGGER_THAN>) E4())?
}


/* <E4> ::= <ID> [ [<E>] ] ( = | += | -= | *= | /= | %= | ^= ) <E4> | <E5>*/
void E4():
{}
{
  <ID> (<OPEN_BRACK> E() <CLOSE_BRACK>)? (<ASSIGN_SYMBOL> | <PLUS_ASSIGN> | <MINUS_ASSIGN> | <MUL_ASSIGN> | <DIV_ASSIGN> | <MOD_ASSIGN> | <POWER_ASSIGN>) E4() | E5()
}

/* <E5>::= <E6> ( ( + | - ) <E6> )* */
void E5():
{}
{
  E6() ((<PLUS> | <MINUS>) E6() )*

}

/* <E6>::= <E7> ( ( * | / | % ) <E7> )* */
void E6():
{}
{
  E7() ( (<MUL> | <DIV>| <MOD>) E7())*
}


/* <E7>::= <E8> [ ^ <E7> ] */
void E7():
{}
{
  E8() ( <POWER> E7())?
}

/* <E8> ::= [ - ] <E9> */
void E8():
{}
{
  ( <MINUS> )? E9()
}

/* <E9> ::= (++ | --) <ID> [ [ <E> ] ] | <ID> [ [ <E> ] ] (++ | --) | <E10> */
void E9():
{}
{
  (<PLUSPLUS> | <MINUSMINUS>) <ID> (<OPEN_BRACK> E() <CLOSE_BRACK>)? | <ID> (<OPEN_BRACK> E() <CLOSE_BRACK>)? (<PLUSPLUS> | <MINUSMINUS>) | E10()
}

/* <E10> ::= <INT> | <FLOAT> |( <E> ) | sqrt ( <E> ) | length ( <E> ) | scale ( <E> ) | <chamada_função> | <ID> [ [ <E> ] ]| ibase | obase | scale | last | . | s (<E>) | c (<E>) | e (<E>) | l (<E>) | a (<E>) | j (<E> , <E>) */
//TODO chamada_funcao
void E10():
{}
{
  <NUM> | <OPEN_PAR> E() <CLOSE_PAR> | <SQRT> <OPEN_PAR> E() <CLOSE_PAR> | <LENGTH> <OPEN_PAR> E() <CLOSE_PAR> | <SCALE> <OPEN_PAR> E() <CLOSE_PAR> |
  chamada_funcao() | <IBASE> | <OBASE>  | <LAST> | <DOT> | <FUNC_S> <OPEN_PAR> E() <CLOSE_PAR> | <FUNC_C> <OPEN_PAR> E() <CLOSE_PAR> | <FUNC_E> <OPEN_PAR> E() <CLOSE_PAR> |
  <FUNC_A> <OPEN_PAR> E() <CLOSE_PAR> | <FUNC_J> <OPEN_PAR> E() <COMMA> E() <CLOSE_PAR>
  // | <ID> (<OPEN_BRACK> E() <CLOSE_BRACK>)? | <OPEN_PAR> E() <CLOSE_PAR> // SE COLOCAR DA ERRO
}

/* <chamada_função> ::= <ID> ( [ <ListaExpressões> ] )*/
void chamada_funcao():
{}
{
  <ID> <OPEN_PAR> (ListaExpressoes())? <CLOSE_PAR>

}

/* <definição de função> ::= define <ID> ( [ <ListaVar>] ) {
[auto <ListaVar>] <ListaComandos> } */
void def_funcao():
{}
{
  <DEFINE> <ID> <OPEN_PAR> (ListaVar())? <CLOSE_PAR> <OPEN_BRACE> (<AUTO> ListaVar())? ListaComandos() <CLOSE_BRACE>
}

 /* <ListaVar> ::= <ID> [ [ ] ] ( , <ID> [ [ ] ])* */
void ListaVar():
{ }
{
  <ID> (<OPEN_BRACK> <CLOSE_BRACK>)? ( <COMMA> <ID> (<OPEN_BRACK> <CLOSE_BRACK>)? )*
}
