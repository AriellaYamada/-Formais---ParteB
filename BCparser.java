/* BCparser.java */
/* Generated By:JavaCC: Do not edit this line. BCparser.java */
import java.io.*;

public class BCparser implements BCparserConstants {
    public static void main(String[] args) throws ParseException, TokenMgrError{
        BCparser bcparser = new BCparser(System.in);
        try{
            bcparser.start();
            System.out.println("Sucesso!");
        }catch (Exception e) {
            //System.out.println(e.toString());
            System.out.println("Erro!\u005cn");
        }
    }

  static final public void start() throws ParseException {/*var locais*/
    int value;
    bc();
    jj_consume_token(0);
  }

/* <bc> ::= (<comando> | <definição de função>)+ */
  static final public void bc() throws ParseException {
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case MINUS:
      case PLUSPLUS:
      case MINUSMINUS:
      case NOT:
      case OPEN_PAR:
      case OPEN_BRACE:
      case SEMICOLON:
      case DOT:
      case IBASE:
      case SCALE:
      case LAST:
      case OBASE:
      case SQRT:
      case LENGTH:
      case FUNC_S:
      case FUNC_C:
      case FUNC_E:
      case FUNC_A:
      case FUNC_J:
      case IF:
      case WHILE:
      case FOR:
      case PRINT:
      case BREAK:
      case CONTINUE:
      case QUIT:
      case RETURN:
      case NUM:
      case ID:
      case STRING:{
        comando();
        break;
        }
      case DEFINE:{
        def_funcao();
        break;
        }
      default:
        jj_la1[0] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case MINUS:
      case PLUSPLUS:
      case MINUSMINUS:
      case NOT:
      case OPEN_PAR:
      case OPEN_BRACE:
      case SEMICOLON:
      case DOT:
      case IBASE:
      case SCALE:
      case LAST:
      case OBASE:
      case SQRT:
      case LENGTH:
      case FUNC_S:
      case FUNC_C:
      case FUNC_E:
      case FUNC_A:
      case FUNC_J:
      case IF:
      case WHILE:
      case FOR:
      case PRINT:
      case DEFINE:
      case BREAK:
      case CONTINUE:
      case QUIT:
      case RETURN:
      case NUM:
      case ID:
      case STRING:{
        ;
        break;
        }
      default:
        jj_la1[1] = jj_gen;
        break label_1;
      }
    }
  }

  static final public void comando() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case MINUS:
    case PLUSPLUS:
    case MINUSMINUS:
    case NOT:
    case OPEN_PAR:
    case DOT:
    case IBASE:
    case SCALE:
    case LAST:
    case OBASE:
    case SQRT:
    case LENGTH:
    case FUNC_S:
    case FUNC_C:
    case FUNC_E:
    case FUNC_A:
    case FUNC_J:
    case NUM:
    case ID:{
      E();
      break;
      }
    case OPEN_BRACE:{
      comando_composto();
      break;
      }
    case IF:{
      IF_COMMAND();
      break;
      }
    case WHILE:{
      WHILE_COMMAND();
      break;
      }
    case FOR:{
      FOR_COMMAND();
      break;
      }
    case SEMICOLON:{
      NULL_COMMAND();
      break;
      }
    case BREAK:{
      BREAK_COMMAND();
      break;
      }
    case CONTINUE:{
      CONTINUE_COMMAND();
      break;
      }
    case QUIT:{
      QUIT_COMMAND();
      break;
      }
    case PRINT:{
      PRINT_COMMAND();
      break;
      }
    case STRING:{
      STRING_COMMAND();
      break;
      }
    case RETURN:{
      RETURN_COMMAND();
      break;
      }
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

/* <comando_composto> ::= { <ListaComandos> } */
  static final public void comando_composto() throws ParseException {
    jj_consume_token(OPEN_BRACE);
    ListaComandos();
    jj_consume_token(CLOSE_BRACE);
  }

/* <ListaComandos> ::= <comando> (<separador> <comando>)* */
  static final public void ListaComandos() throws ParseException {
    comando();
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case SEPARADOR:{
        ;
        break;
        }
      default:
        jj_la1[3] = jj_gen;
        break label_2;
      }
      jj_consume_token(SEPARADOR);
      comando();
    }
  }

/* <IF> ::= if ( <E> ) <comando> [ else <comando> ] */
  static final public void IF_COMMAND() throws ParseException {
    jj_consume_token(IF);
    jj_consume_token(OPEN_PAR);
    E();
    jj_consume_token(CLOSE_PAR);
    comando();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ELSE:{
      jj_consume_token(ELSE);
      comando();
      break;
      }
    default:
      jj_la1[4] = jj_gen;
      ;
    }
  }

/* <WHILE> ::= while ( <E> ) <comando> */
  static final public void WHILE_COMMAND() throws ParseException {
    jj_consume_token(WHILE);
    jj_consume_token(OPEN_PAR);
    E();
    jj_consume_token(CLOSE_PAR);
    comando();
  }

/* <FOR> ::= for ( [<E>] ; [<E>] ; [<E>] ) <comando> */
  static final public void FOR_COMMAND() throws ParseException {
    jj_consume_token(FOR);
    jj_consume_token(OPEN_PAR);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case MINUS:
    case PLUSPLUS:
    case MINUSMINUS:
    case NOT:
    case OPEN_PAR:
    case DOT:
    case IBASE:
    case SCALE:
    case LAST:
    case OBASE:
    case SQRT:
    case LENGTH:
    case FUNC_S:
    case FUNC_C:
    case FUNC_E:
    case FUNC_A:
    case FUNC_J:
    case NUM:
    case ID:{
      E();
      break;
      }
    default:
      jj_la1[5] = jj_gen;
      ;
    }
    jj_consume_token(SEMICOLON);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case MINUS:
    case PLUSPLUS:
    case MINUSMINUS:
    case NOT:
    case OPEN_PAR:
    case DOT:
    case IBASE:
    case SCALE:
    case LAST:
    case OBASE:
    case SQRT:
    case LENGTH:
    case FUNC_S:
    case FUNC_C:
    case FUNC_E:
    case FUNC_A:
    case FUNC_J:
    case NUM:
    case ID:{
      E();
      break;
      }
    default:
      jj_la1[6] = jj_gen;
      ;
    }
    jj_consume_token(SEMICOLON);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case MINUS:
    case PLUSPLUS:
    case MINUSMINUS:
    case NOT:
    case OPEN_PAR:
    case DOT:
    case IBASE:
    case SCALE:
    case LAST:
    case OBASE:
    case SQRT:
    case LENGTH:
    case FUNC_S:
    case FUNC_C:
    case FUNC_E:
    case FUNC_A:
    case FUNC_J:
    case NUM:
    case ID:{
      E();
      break;
      }
    default:
      jj_la1[7] = jj_gen;
      ;
    }
    jj_consume_token(CLOSE_PAR);
    comando();
  }

/* <NULL> ::= ; */
  static final public void NULL_COMMAND() throws ParseException {
    jj_consume_token(SEMICOLON);
  }

/* <BREAK> ::= break*/
  static final public void BREAK_COMMAND() throws ParseException {
    jj_consume_token(BREAK);
  }

/* <CONTINUE> ::= continue */
  static final public void CONTINUE_COMMAND() throws ParseException {
    jj_consume_token(CONTINUE);
  }

/* <QUIT> ::= quit*/
  static final public void QUIT_COMMAND() throws ParseException {
    jj_consume_token(QUIT);
  }

/* <PRINT> ::= print <ListaExpressões> */
  static final public void PRINT_COMMAND() throws ParseException {
    jj_consume_token(PRINT);
    ListaExpressoes();
  }

/* <STRING_COMMAND> ::= <STRING>*/
  static final public void STRING_COMMAND() throws ParseException {
    jj_consume_token(STRING);
  }

/* <ListaExpressões> ::= <E> ( , <E>)* */
  static final public void ListaExpressoes() throws ParseException {
    E();
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COMMA:{
        ;
        break;
        }
      default:
        jj_la1[8] = jj_gen;
        break label_3;
      }
      jj_consume_token(COMMA);
      E();
    }
  }

/*<RETORNO> ::= return ( [<E>] ) | return [<E>] */
  static final public void RETURN_COMMAND() throws ParseException {
    jj_consume_token(RETURN);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case OPEN_PAR:{
      jj_consume_token(OPEN_PAR);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case MINUS:
      case PLUSPLUS:
      case MINUSMINUS:
      case NOT:
      case OPEN_PAR:
      case DOT:
      case IBASE:
      case SCALE:
      case LAST:
      case OBASE:
      case SQRT:
      case LENGTH:
      case FUNC_S:
      case FUNC_C:
      case FUNC_E:
      case FUNC_A:
      case FUNC_J:
      case NUM:
      case ID:{
        E();
        break;
        }
      default:
        jj_la1[9] = jj_gen;
        ;
      }
      jj_consume_token(CLOSE_PAR);
      break;
      }
    default:
      jj_la1[11] = jj_gen;
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case MINUS:
      case PLUSPLUS:
      case MINUSMINUS:
      case NOT:
      case OPEN_PAR:
      case DOT:
      case IBASE:
      case SCALE:
      case LAST:
      case OBASE:
      case SQRT:
      case LENGTH:
      case FUNC_S:
      case FUNC_C:
      case FUNC_E:
      case FUNC_A:
      case FUNC_J:
      case NUM:
      case ID:{
        E();
        break;
        }
      default:
        jj_la1[10] = jj_gen;
        ;
      }
    }
  }

/* <E>::= <E1> ( || <E1> )* */
  static final public void E() throws ParseException {Token t;
    E1();
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case OR:{
        ;
        break;
        }
      default:
        jj_la1[12] = jj_gen;
        break label_4;
      }
      jj_consume_token(OR);
      E1();
    }
  }

/* <E1>::= <E2> ( && <E2> )* */
  static final public void E1() throws ParseException {
    E2();
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case AND:{
        ;
        break;
        }
      default:
        jj_la1[13] = jj_gen;
        break label_5;
      }
      jj_consume_token(AND);
      E2();
    }
  }

/* <E2>::= [ ! ] <E3> */
  static final public void E2() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case NOT:{
      jj_consume_token(NOT);
      break;
      }
    default:
      jj_la1[14] = jj_gen;
      ;
    }
    E3();
  }

/* <E3> ::= <E4> [ (== | <= | >= | != | < | > ) <E4> ] */
  static final public void E3() throws ParseException {
    E4();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case BIGGER_THAN:
    case SMALLER_THAN:
    case BIGGER_EQUAL_THAN:
    case SMALLER_EQUAL_THAN:
    case EQUAL:
    case NOT_EQUAL:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case EQUAL:{
        jj_consume_token(EQUAL);
        break;
        }
      case SMALLER_EQUAL_THAN:{
        jj_consume_token(SMALLER_EQUAL_THAN);
        break;
        }
      case BIGGER_EQUAL_THAN:{
        jj_consume_token(BIGGER_EQUAL_THAN);
        break;
        }
      case NOT_EQUAL:{
        jj_consume_token(NOT_EQUAL);
        break;
        }
      case SMALLER_THAN:{
        jj_consume_token(SMALLER_THAN);
        break;
        }
      case BIGGER_THAN:{
        jj_consume_token(BIGGER_THAN);
        break;
        }
      default:
        jj_la1[15] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      E4();
      break;
      }
    default:
      jj_la1[16] = jj_gen;
      ;
    }
  }

/* <E4> ::= <ID> [ [<E>] ] ( = | += | -= | *= | /= | %= | ^= ) <E4> | <E5>*/
  static final public void E4() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ID:{
      jj_consume_token(ID);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case OPEN_BRACK:{
        jj_consume_token(OPEN_BRACK);
        E();
        jj_consume_token(CLOSE_BRACK);
        break;
        }
      default:
        jj_la1[17] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ASSIGN_SYMBOL:{
        jj_consume_token(ASSIGN_SYMBOL);
        break;
        }
      case PLUS_ASSIGN:{
        jj_consume_token(PLUS_ASSIGN);
        break;
        }
      case MINUS_ASSIGN:{
        jj_consume_token(MINUS_ASSIGN);
        break;
        }
      case MUL_ASSIGN:{
        jj_consume_token(MUL_ASSIGN);
        break;
        }
      case DIV_ASSIGN:{
        jj_consume_token(DIV_ASSIGN);
        break;
        }
      case MOD_ASSIGN:{
        jj_consume_token(MOD_ASSIGN);
        break;
        }
      case POWER_ASSIGN:{
        jj_consume_token(POWER_ASSIGN);
        break;
        }
      default:
        jj_la1[18] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      E4();
      break;
      }
    case MINUS:
    case PLUSPLUS:
    case MINUSMINUS:
    case OPEN_PAR:
    case DOT:
    case IBASE:
    case SCALE:
    case LAST:
    case OBASE:
    case SQRT:
    case LENGTH:
    case FUNC_S:
    case FUNC_C:
    case FUNC_E:
    case FUNC_A:
    case FUNC_J:
    case NUM:{
      E5();
      break;
      }
    default:
      jj_la1[19] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

/* <E5>::= <E6> ( ( + | - ) <E6> )* */
  static final public void E5() throws ParseException {
    E6();
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PLUS:
      case MINUS:{
        ;
        break;
        }
      default:
        jj_la1[20] = jj_gen;
        break label_6;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PLUS:{
        jj_consume_token(PLUS);
        break;
        }
      case MINUS:{
        jj_consume_token(MINUS);
        break;
        }
      default:
        jj_la1[21] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      E6();
    }
  }

/* <E6>::= <E7> ( ( * | / | % ) <E7> )* */
  static final public void E6() throws ParseException {
    E7();
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case DIV:
      case MUL:
      case MOD:{
        ;
        break;
        }
      default:
        jj_la1[22] = jj_gen;
        break label_7;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case MUL:{
        jj_consume_token(MUL);
        break;
        }
      case DIV:{
        jj_consume_token(DIV);
        break;
        }
      case MOD:{
        jj_consume_token(MOD);
        break;
        }
      default:
        jj_la1[23] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      E7();
    }
  }

/* <E7>::= <E8> [ ^ <E7> ] */
  static final public void E7() throws ParseException {
    E8();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case POWER:{
      jj_consume_token(POWER);
      E7();
      break;
      }
    default:
      jj_la1[24] = jj_gen;
      ;
    }
  }

/* <E8> ::= [ - ] <E9> */
  static final public void E8() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case MINUS:{
      jj_consume_token(MINUS);
      break;
      }
    default:
      jj_la1[25] = jj_gen;
      ;
    }
    E9();
  }

/* <E9> ::= (++ | --) <ID> [ [ <E> ] ] | <ID> [ [ <E> ] ] (++ | --) | <E10> */
  static final public void E9() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case PLUSPLUS:
    case MINUSMINUS:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PLUSPLUS:{
        jj_consume_token(PLUSPLUS);
        break;
        }
      case MINUSMINUS:{
        jj_consume_token(MINUSMINUS);
        break;
        }
      default:
        jj_la1[26] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(ID);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case OPEN_BRACK:{
        jj_consume_token(OPEN_BRACK);
        E();
        jj_consume_token(CLOSE_BRACK);
        break;
        }
      default:
        jj_la1[27] = jj_gen;
        ;
      }
      break;
      }
    case ID:{
      jj_consume_token(ID);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case OPEN_BRACK:{
        jj_consume_token(OPEN_BRACK);
        E();
        jj_consume_token(CLOSE_BRACK);
        break;
        }
      default:
        jj_la1[28] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PLUSPLUS:{
        jj_consume_token(PLUSPLUS);
        break;
        }
      case MINUSMINUS:{
        jj_consume_token(MINUSMINUS);
        break;
        }
      default:
        jj_la1[29] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
      }
    case OPEN_PAR:
    case DOT:
    case IBASE:
    case SCALE:
    case LAST:
    case OBASE:
    case SQRT:
    case LENGTH:
    case FUNC_S:
    case FUNC_C:
    case FUNC_E:
    case FUNC_A:
    case FUNC_J:
    case NUM:{
      E10();
      break;
      }
    default:
      jj_la1[30] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

/* <E10> ::= <INT> | <FLOAT> |( <E> ) | sqrt ( <E> ) | length ( <E> ) | scale ( <E> ) | <chamada_função> | <ID> [ [ <E> ] ]| ibase | obase | scale | last | . | s (<E>) | c (<E>) | e (<E>) | l (<E>) | a (<E>) | j (<E> , <E>) */
//TODO chamada_funcao
  static final public void E10() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case NUM:{
      jj_consume_token(NUM);
      break;
      }
    case OPEN_PAR:{
      jj_consume_token(OPEN_PAR);
      E();
      jj_consume_token(CLOSE_PAR);
      break;
      }
    case SQRT:{
      jj_consume_token(SQRT);
      jj_consume_token(OPEN_PAR);
      E();
      jj_consume_token(CLOSE_PAR);
      break;
      }
    case LENGTH:{
      jj_consume_token(LENGTH);
      jj_consume_token(OPEN_PAR);
      E();
      jj_consume_token(CLOSE_PAR);
      break;
      }
    case SCALE:{
      jj_consume_token(SCALE);
      jj_consume_token(OPEN_PAR);
      E();
      jj_consume_token(CLOSE_PAR);
      break;
      }
    case ID:{
      chamada_funcao();
      break;
      }
    case IBASE:{
      jj_consume_token(IBASE);
      break;
      }
    case OBASE:{
      jj_consume_token(OBASE);
      break;
      }
    case LAST:{
      jj_consume_token(LAST);
      break;
      }
    case DOT:{
      jj_consume_token(DOT);
      break;
      }
    case FUNC_S:{
      jj_consume_token(FUNC_S);
      jj_consume_token(OPEN_PAR);
      E();
      jj_consume_token(CLOSE_PAR);
      break;
      }
    case FUNC_C:{
      jj_consume_token(FUNC_C);
      jj_consume_token(OPEN_PAR);
      E();
      jj_consume_token(CLOSE_PAR);
      break;
      }
    case FUNC_E:{
      jj_consume_token(FUNC_E);
      jj_consume_token(OPEN_PAR);
      E();
      jj_consume_token(CLOSE_PAR);
      break;
      }
    case FUNC_A:{
      jj_consume_token(FUNC_A);
      jj_consume_token(OPEN_PAR);
      E();
      jj_consume_token(CLOSE_PAR);
      break;
      }
    case FUNC_J:{
      jj_consume_token(FUNC_J);
      jj_consume_token(OPEN_PAR);
      E();
      jj_consume_token(COMMA);
      E();
      jj_consume_token(CLOSE_PAR);
      break;
      }
    default:
      jj_la1[31] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

/* <chamada_função> ::= <ID> ( [ <ListaExpressões> ] )*/
  static final public void chamada_funcao() throws ParseException {
    jj_consume_token(ID);
    jj_consume_token(OPEN_PAR);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case MINUS:
    case PLUSPLUS:
    case MINUSMINUS:
    case NOT:
    case OPEN_PAR:
    case DOT:
    case IBASE:
    case SCALE:
    case LAST:
    case OBASE:
    case SQRT:
    case LENGTH:
    case FUNC_S:
    case FUNC_C:
    case FUNC_E:
    case FUNC_A:
    case FUNC_J:
    case NUM:
    case ID:{
      ListaExpressoes();
      break;
      }
    default:
      jj_la1[32] = jj_gen;
      ;
    }
    jj_consume_token(CLOSE_PAR);
  }

/* <definição de função> ::= define <ID> ( [ <ListaVar>] ) {
[auto <ListaVar>] <ListaComandos> } */
  static final public void def_funcao() throws ParseException {
    jj_consume_token(DEFINE);
    jj_consume_token(ID);
    jj_consume_token(OPEN_PAR);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ID:{
      ListaVar();
      break;
      }
    default:
      jj_la1[33] = jj_gen;
      ;
    }
    jj_consume_token(CLOSE_PAR);
    jj_consume_token(OPEN_BRACE);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case AUTO:{
      jj_consume_token(AUTO);
      ListaVar();
      break;
      }
    default:
      jj_la1[34] = jj_gen;
      ;
    }
    ListaComandos();
    jj_consume_token(CLOSE_BRACE);
  }

/* <ListaVar> ::= <ID> [ [ ] ] ( , <ID> [ [ ] ])* */
  static final public void ListaVar() throws ParseException {
    jj_consume_token(ID);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case OPEN_BRACK:{
      jj_consume_token(OPEN_BRACK);
      jj_consume_token(CLOSE_BRACK);
      break;
      }
    default:
      jj_la1[35] = jj_gen;
      ;
    }
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COMMA:{
        ;
        break;
        }
      default:
        jj_la1[36] = jj_gen;
        break label_8;
      }
      jj_consume_token(COMMA);
      jj_consume_token(ID);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case OPEN_BRACK:{
        jj_consume_token(OPEN_BRACK);
        jj_consume_token(CLOSE_BRACK);
        break;
        }
      default:
        jj_la1[37] = jj_gen;
        ;
      }
    }
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public BCparserTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[38];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x8004c200,0x8004c200,0x8004c200,0x0,0x0,0x8004c200,0x8004c200,0x8004c200,0x0,0x8004c200,0x8004c200,0x80000000,0x10000,0x20000,0x40000,0x7e000000,0x7e000000,0x0,0x1f80000,0x8000c200,0x300,0x300,0x1c00,0x1c00,0x2000,0x200,0xc000,0x0,0x0,0xc000,0x8000c000,0x80000000,0x8004c200,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0xdeeff90a,0xdeeff90a,0xceeff90a,0x400,0x1000000,0x6ff900,0x6ff900,0x6ff900,0x10,0x6ff900,0x6ff900,0x0,0x0,0x0,0x0,0x0,0x0,0x40,0x200,0x6ff900,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x40,0x40,0x0,0x6ff900,0x6ff900,0x6ff900,0x0,0x20000000,0x40,0x10,0x40,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x683,0x683,0x683,0x0,0x0,0x280,0x280,0x280,0x0,0x280,0x280,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x280,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x280,0x280,0x280,0x200,0x0,0x0,0x0,0x0,};
   }

  /** Constructor with InputStream. */
  public BCparser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public BCparser(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new BCparserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 38; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 38; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public BCparser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new BCparserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 38; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 38; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public BCparser(BCparserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 38; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(BCparserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 38; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk_f() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[75];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 38; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 75; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
