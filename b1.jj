options{IGNORE_CASE = true;}
PARSER_BEGIN(BCparser)
import java.io.*;

public class BCparser{
    public static void main(String[] args) throws ParseException, TokenMgrError{
        BCparser bcparser = new BCparser(System.in);
        try{
            bcparser.start();
            System.out.println("Sucesso!");
        }catch (Exception e) {
            //System.out.println(e.toString());
            System.out.println("Erro!\n");
        }
    }
}
PARSER_END(BCparser)

SKIP : {
  " "
  |  "\t"
  |  "\n"
  |  "\r"
  |  <"//" (~["\n","\r"])* ("\n" | "\r" | "\r\n")>
}
/* COMENTARIO DE MULTIPLAS LINHAS */
SKIP :
{
  "/*" : multilinecomment
}

<multilinecomment> SKIP:
{
   "*/" : DEFAULT
|  <~[]>
}

/* SÍMBOLOS */
TOKEN:
{
    <LINE_BREAK: "\\n" | "\\r" | "\\r\\n" > |
    <PLUS: "+"> |
    <MINUS: "-"> |
    <DIV: "/"> |
    <MUL: "*"> |
    <MOD: "%"> |
    <POWER: "^"> |
    <PLUSPLUS: "++"> |
    <MINUSMINUS: "--"> |
    <OR: "||"> |
    <AND: "&&"> |
    <NOT: "!"> |
    <MINUS_ASSIGN: "-="> |
    <PLUS_ASSIGN: "+="> |
    <DIV_ASSIGN: "/="> |
    <MUL_ASSIGN: "*="> |
    <MOD_ASSIGN: "%="> |
    <POWER_ASSIGN: "^="> |
    <BIGGER_THAN: ">"> |
    <SMALLER_THAN: "<"> |
    <BIGGER_EQUAL_THAN: ">="> |
    <SMALLER_EQUAL_THAN: "<="> |
    <EQUAL: "=="> |
    <NOT_EQUAL: "!=">
}


/* SEPARADORES E AGRUPADORES */
TOKEN:
{
  <OPEN_PAR: "(">
| <CLOSE_PAR: ")">
|	<OPEN_BRACE: "{">
|	<CLOSE_BRACE: "}">
|	<SEMICOLON: ";">
|	<COMMA: ",">
|	<QUOT: "\"">
|	<OPEN_BRACK: "[">
|	<CLOSE_BRACK: "]">
|	<DOT: ".">
|	<ASSIGN_SYMBOL: "=">
| <SEPARADOR: <SEMICOLON>|"\\n">
}


/* PALAVRAS RESERVADAS E FUNÇÕES NATIVAS */
TOKEN:
{
  <IBASE: "ibase">
  | <SCALE: "scale">
	|	<LAST: "last" | <DOT>>
	|	<OBASE: "obase">
	|	<SQRT: "sqrt">
	|	<LENGTH: "length">
	|	<FUNC_S: "s">
	|	<FUNC_C: "c">
	|	<FUNC_E: "e">
	|	<FUNC_L: "l">
	|	<FUNC_A: "a">
	|	<FUNC_J: "j">
	|	<IF: "if">
	|	<ELSE: "else">
	|	<WHILE: "while">
	|	<FOR: "for">
	|	<PRINT: "print">
	|	<DEFINE: "define">
	|	<AUTO: "auto">
	|	<BREAK: "break">
	|	<CONTINUE: "continue">
	|	<QUIT: "quit">
	|	<RETURN: "return">
}

/* NUMEROS, PALAVRAS E IDENTIFICADORES */
TOKEN:
{
  <#DIGIT: ["0"-"9"] > |
  <#LETTER: "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p"| "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "_"> |
  <#SYMBOL: " " | <NOT> | "%" | "&" | "'" | "(" | ")" | "*" | "+" | "," | "-" | "." | "/" | ":" | ";" | <SMALLER_THAN> | <ASSIGN_SYMBOL> | <BIGGER_THAN>  | "[" | "]" | "^" | "{" | "|" | "}"> |
	<#INTEGER: ("-" | "+")? (<DIGIT>)+> |
	<#REAL: ("-" | "+")? (<DIGIT>)+ "." (<DIGIT>)+> |
	<NUM: <INTEGER> | <REAL> > |
	<#ALPHANUMERIC: <DIGIT> | <LETTER> > |
	< ID: <LETTER> (<ALPHANUMERIC> )* > |
	<STRING: <QUOT>(<ALPHANUMERIC>|<SYMBOL>|<LINE_BREAK>)*<QUOT>>
}

JAVACODE void analisador_lexico()
{
  try {
    Token t = getNextToken();
    while(t.kind != 0) {
      System.out.println("\t (" + t.beginLine + ", " + t.beginColumn + "): " + t.image + " - " + tokenImage[t.kind]);
      t = getNextToken();
    }
  } catch (TokenMgrError error) {
    System.out.println(error.getMessage());
  }
}
