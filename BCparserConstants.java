/* Generated By:JavaCC: Do not edit this line. BCparserConstants.java */

/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface BCparserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int LINE_BREAK = 7;
  /** RegularExpression Id. */
  int PLUS = 8;
  /** RegularExpression Id. */
  int MINUS = 9;
  /** RegularExpression Id. */
  int DIV = 10;
  /** RegularExpression Id. */
  int MUL = 11;
  /** RegularExpression Id. */
  int MOD = 12;
  /** RegularExpression Id. */
  int POWER = 13;
  /** RegularExpression Id. */
  int PLUSPLUS = 14;
  /** RegularExpression Id. */
  int MINUSMINUS = 15;
  /** RegularExpression Id. */
  int OR = 16;
  /** RegularExpression Id. */
  int AND = 17;
  /** RegularExpression Id. */
  int NOT = 18;
  /** RegularExpression Id. */
  int MINUS_ASSIGN = 19;
  /** RegularExpression Id. */
  int PLUS_ASSIGN = 20;
  /** RegularExpression Id. */
  int DIV_ASSIGN = 21;
  /** RegularExpression Id. */
  int MUL_ASSIGN = 22;
  /** RegularExpression Id. */
  int MOD_ASSIGN = 23;
  /** RegularExpression Id. */
  int POWER_ASSIGN = 24;
  /** RegularExpression Id. */
  int BIGGER_THAN = 25;
  /** RegularExpression Id. */
  int SMALLER_THAN = 26;
  /** RegularExpression Id. */
  int BIGGER_EQUAL_THAN = 27;
  /** RegularExpression Id. */
  int SMALLER_EQUAL_THAN = 28;
  /** RegularExpression Id. */
  int EQUAL = 29;
  /** RegularExpression Id. */
  int NOT_EQUAL = 30;
  /** RegularExpression Id. */
  int OPEN_PAR = 31;
  /** RegularExpression Id. */
  int CLOSE_PAR = 32;
  /** RegularExpression Id. */
  int OPEN_BRACE = 33;
  /** RegularExpression Id. */
  int CLOSE_BRACE = 34;
  /** RegularExpression Id. */
  int SEMICOLON = 35;
  /** RegularExpression Id. */
  int COMMA = 36;
  /** RegularExpression Id. */
  int QUOT = 37;
  /** RegularExpression Id. */
  int OPEN_BRACK = 38;
  /** RegularExpression Id. */
  int CLOSE_BRACK = 39;
  /** RegularExpression Id. */
  int DOT = 40;
  /** RegularExpression Id. */
  int ASSIGN_SYMBOL = 41;
  /** RegularExpression Id. */
  int SEPARADOR = 42;
  /** RegularExpression Id. */
  int IBASE = 43;
  /** RegularExpression Id. */
  int SCALE = 44;
  /** RegularExpression Id. */
  int LAST = 45;
  /** RegularExpression Id. */
  int OBASE = 46;
  /** RegularExpression Id. */
  int SQRT = 47;
  /** RegularExpression Id. */
  int LENGTH = 48;
  /** RegularExpression Id. */
  int FUNC_S = 49;
  /** RegularExpression Id. */
  int FUNC_C = 50;
  /** RegularExpression Id. */
  int FUNC_E = 51;
  /** RegularExpression Id. */
  int FUNC_L = 52;
  /** RegularExpression Id. */
  int FUNC_A = 53;
  /** RegularExpression Id. */
  int FUNC_J = 54;
  /** RegularExpression Id. */
  int IF = 55;
  /** RegularExpression Id. */
  int ELSE = 56;
  /** RegularExpression Id. */
  int WHILE = 57;
  /** RegularExpression Id. */
  int FOR = 58;
  /** RegularExpression Id. */
  int PRINT = 59;
  /** RegularExpression Id. */
  int DEFINE = 60;
  /** RegularExpression Id. */
  int AUTO = 61;
  /** RegularExpression Id. */
  int BREAK = 62;
  /** RegularExpression Id. */
  int CONTINUE = 63;
  /** RegularExpression Id. */
  int QUIT = 64;
  /** RegularExpression Id. */
  int RETURN = 65;
  /** RegularExpression Id. */
  int DIGIT = 66;
  /** RegularExpression Id. */
  int LETTER = 67;
  /** RegularExpression Id. */
  int SYMBOL = 68;
  /** RegularExpression Id. */
  int INTEGER = 69;
  /** RegularExpression Id. */
  int REAL = 70;
  /** RegularExpression Id. */
  int NUM = 71;
  /** RegularExpression Id. */
  int ALPHANUMERIC = 72;
  /** RegularExpression Id. */
  int ID = 73;
  /** RegularExpression Id. */
  int STRING = 74;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "<token of kind 5>",
    "<token of kind 6>",
    "<LINE_BREAK>",
    "\"+\"",
    "\"-\"",
    "\"/\"",
    "\"*\"",
    "\"%\"",
    "\"^\"",
    "\"++\"",
    "\"--\"",
    "\"||\"",
    "\"&&\"",
    "\"!\"",
    "\"-=\"",
    "\"+=\"",
    "\"/=\"",
    "\"*=\"",
    "\"%=\"",
    "\"^=\"",
    "\">\"",
    "\"<\"",
    "\">=\"",
    "\"<=\"",
    "\"==\"",
    "\"!=\"",
    "\"(\"",
    "\")\"",
    "\"{\"",
    "\"}\"",
    "\";\"",
    "\",\"",
    "\"\\\"\"",
    "\"[\"",
    "\"]\"",
    "\".\"",
    "\"=\"",
    "<SEPARADOR>",
    "\"ibase\"",
    "\"scale\"",
    "<LAST>",
    "\"obase\"",
    "\"sqrt\"",
    "\"length\"",
    "\"s\"",
    "\"c\"",
    "\"e\"",
    "\"l\"",
    "\"a\"",
    "\"j\"",
    "\"if\"",
    "\"else\"",
    "\"while\"",
    "\"for\"",
    "\"print\"",
    "\"define\"",
    "\"auto\"",
    "\"break\"",
    "\"continue\"",
    "\"quit\"",
    "\"return\"",
    "<DIGIT>",
    "<LETTER>",
    "<SYMBOL>",
    "<INTEGER>",
    "<REAL>",
    "<NUM>",
    "<ALPHANUMERIC>",
    "<ID>",
    "<STRING>",
  };

}
