options{IGNORE_CASE = true;}
PARSER_BEGIN(BCparser)
import java.io.*;

public class BCparser{
    public static void main(String[] args) throws ParseException, TokenMgrError{
      /*  BCparser bcparser = new BCparser(System.in);
        try{
            bcparser.start();
            System.out.println("Sucesso!");
        }catch (Exception e) {
            //System.out.println(e.toString());
            System.out.println("Erro!\n");
        }*/
        String nome_arquivo = args[0];
        BCparser parser;

        try {
            parser = new BCparser(new java.io.FileInputStream(nome_arquivo));
        }
        catch (java.io.FileNotFoundException e) {
            System.out.println("Arquivo " + nome_arquivo + " nao foi encontrado.");
            return;
        }

        try {
          parser.analisador_lexico();
          System.out.println("Programa analisado com sucesso.");
        } catch(ParseException e) {
          System.out.println(e.getMessage());
        }
    }
}
PARSER_END(BCparser)

SKIP : {
  " "
  |  "\t"
  |  "\n"
  |  "\r"
  |  <"//" (~["\n","\r"])* ("\n" | "\r" | "\r\n")>
}
/* COMENTARIO DE MULTIPLAS LINHAS */
SKIP :
{
  "/*" : multilinecomment
}

<multilinecomment> SKIP:
{
   "*/" : DEFAULT
|  <~[]>
}

/* SÍMBOLOS */
TOKEN:
{
    <LINE_BREAK: "\\n" | "\\r" | "\\r\\n" > |
    <PLUS: ["+"]> |
    <MINUS: ["-"]> |
    <DIV: ["/"]> |
    <MUL: ["*"]> |
    <MOD: ["%"]> |
    <POWER: ["^"]> |
    <PLUSPLUS: "+" "+"> |
    <MINUSMINUS: "-" "-"> |
    <OR: "|" "|"> |
    <AND: "&" "&"> |
    <NOT: ["!"]> |
    <MINUS_ASSIGN: "-" "="> |
    <PLUS_ASSIGN: "+" "="> |
    <DIV_ASSIGN: "/" "="> |
    <MUL_ASSIGN: "*" "="> |
    <MOD_ASSIGN: "%" "="> |
    <POWER_ASSIGN: "^" "="> |
    <BIGGER_THAN: [">"]> |
    <SMALLER_THAN: ["<"]> |
    <BIGGER_EQUAL_THAN: ">" "="> |
    <SMALLER_EQUAL_THAN: "<" "="> |
    <EQUAL: "=" "="> |
    <NOT_EQUAL: "!" "=">
}


/* SEPARADORES E AGRUPADORES */
TOKEN:
{
  <OPEN_PAR: ["("]>
| <CLOSE_PAR: [")"]>
|	<OPEN_BRACE: ["{"]>
|	<CLOSE_BRACE: ["}"]>
|	<COMMA: [","]>
|	<QUOT: ["\""]>
|	<OPEN_BRACK: ["["]>
|	<CLOSE_BRACK: ["]"]>
|	<DOT: ["."]>
|	<ASSIGN_SYMBOL: ["="]>
| <SEPARADOR: [";"]|"\\n">
}

/* PALAVRAS RESERVADAS E FUNÇÕES NATIVAS */
TOKEN:
{
  <IBASE: "i" "b" "a" "s" "e">
  | <SCALE: "s" "c" "a" "l" "e">
	|	<LAST: "l" "a" "s" "t" | <DOT>>
	|	<OBASE: "o" "b" "a" "s" "e">
	|	<SQRT: "s" "q" "r" "t">
	|	<LENGTH: "l" "e" "n" "g" "t" "h">
	|	<FUNC_S: "s">
	|	<FUNC_C: "c">
	|	<FUNC_E: "e">
	|	<FUNC_L: "l">
	|	<FUNC_A: "a">
	|	<FUNC_J: "j">
	|	<IF: "i" "f">
	|	<ELSE: "e" "l" "s" "e">
	|	<WHILE: "w" "h" "i" "l" "e">
	|	<FOR: "f" "o" "r">
	|	<PRINT: "p" "r" "i" "n" "t">
	|	<DEFINE: "d" "e" "f" "i" "n" "e">
	|	<AUTO: "a" "u" "t" "o">
	|	<BREAK: "b" "r" "e" "a" "k">
	|	<CONTINUE: "c" "o" "n" "t" "i" "n" "u" "e">
	|	<QUIT: "q" "u" "i" "t">
	|	<RETURN: "r" "e" "t" "u" "r" "n">
}

/* NUMEROS, PALAVRAS E IDENTIFICADORES */
TOKEN:
{
  <#DIGIT: ["0"-"9"] > |
  <#LETTER: ["a"] | ["b"] | ["c"] | ["d"] | ["e"] | ["f"] | ["g"] | ["h"] | ["i"] | ["j"] | ["k"] | ["l"] | ["m"] | ["n"] | ["o"] | ["p"] | ["q"] | ["r"] | ["s"] | ["t"] | ["u"] | ["v"] | ["w"] | ["x"] | ["y"] | ["z"] | ["_"]> |
  <#SYMBOL: [" "] | <NOT> | ["%"] | ["&"] | ["'"] | ["("] | [")"] | ["*"] | ["+"] | [","] | ["-"] | ["."] | ["/"] | [":"] | [";"] | <SMALLER_THAN> | <ASSIGN_SYMBOL> | <BIGGER_THAN>  | ["["] | ["]"] | ["^"] | ["{"] | ["|"] | ["}"]> |
	<#INTEGER: (["-"] | ["+"])? (<DIGIT>)+> |
	<#REAL: (["-"] | ["+"])? (<DIGIT>)+ "." (<DIGIT>)+> |
	<NUM: <INTEGER> | <REAL> > |
	<#ALPHANUMERIC: <DIGIT> | <LETTER> > |
	< ID: <LETTER> (<ALPHANUMERIC> )* > |
	<STRING: <QUOT>(<DIGIT>|<LETTER>|<SYMBOL>|<INTEGER>|<REAL>|<ALPHANUMERIC>|<LINE_BREAK>)*<QUOT>>
}

JAVACODE void analisador_lexico()
{
  try {
    Token t = getNextToken();
    while(t.kind != 0) {
      System.out.println("\t (" + t.beginLine + ", " + t.beginColumn + "): " + t.image + " - " + tokenImage[t.kind]);
      t = getNextToken();
    }
  } catch (TokenMgrError error) {
    System.out.println(error.getMessage());
  }
}
